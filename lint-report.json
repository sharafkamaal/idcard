[{"filePath":"d:\\New folder\\idcard\\src\\app\\(app)\\dashboard\\page.tsx","messages":[{"ruleId":null,"nodeType":null,"fatal":true,"severity":2,"message":"Parsing error: Expected corresponding JSX closing tag for 'section'.","line":367,"column":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  CardTitle,\r\n} from '@/components/ui/card';\r\nimport { Badge } from '@/components/ui/badge';\r\nimport { Button } from '@/components/ui/button';\r\nimport {\r\n  PieChart,\r\n  Pie,\r\n  Cell,\r\n  Tooltip,\r\n  LineChart,\r\n  Line,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  BarChart,\r\n  Bar,\r\n  ResponsiveContainer,\r\n  Legend,\r\n} from 'recharts';\r\nimport { Users, GraduationCap, Clock, CheckCircle, Eye, Edit } from 'lucide-react';\r\nimport { ClientOnly } from '@/components/ClientOnly';\r\n\r\n// Work Status Data for Pie Chart\r\nconst workStatusData = [\r\n  { name: 'Approved', value: 45, color: '#3B82F6' },\r\n  { name: 'Completed', value: 35, color: '#22C55E' },\r\n  { name: 'Pending', value: 20, color: '#EF4444' },\r\n];\r\n\r\n// Printing Turnaround Time Data for Line Chart\r\nconst printingTurnaroundData = [\r\n  { month: 'Jan', time: 12 },\r\n  { month: 'Feb', time: 15 },\r\n  { month: 'Mar', time: 8 },\r\n  { month: 'Apr', time: 18 },\r\n  { month: 'May', time: 14 },\r\n  { month: 'Jun', time: 10 },\r\n  { month: 'Jul', time: 16 },\r\n  { month: 'Aug', time: 12 },\r\n  { month: 'Sep', time: 9 },\r\n  { month: 'Oct', time: 13 },\r\n  { month: 'Nov', time: 11 },\r\n  { month: 'Dec', time: 14 },\r\n];\r\n\r\n// Error/Rejected Entries Overview Data for Bar Chart\r\nconst entriesOverviewData = [\r\n  { month: 'Jan', invalid: 12, missing: 8, incomplete: 5 },\r\n  { month: 'Feb', invalid: 15, missing: 10, incomplete: 7 },\r\n  { month: 'Mar', invalid: 8, missing: 6, incomplete: 4 },\r\n  { month: 'Apr', invalid: 18, missing: 12, incomplete: 9 },\r\n  { month: 'May', invalid: 14, missing: 9, incomplete: 6 },\r\n  { month: 'Jun', invalid: 10, missing: 7, incomplete: 5 },\r\n];\r\n\r\n// Student Requests Data for Table\r\nconst studentRequestsData = [\r\n  {\r\n    id: 1,\r\n    date: '04-08-2025',\r\n    verifiedBatch: true,\r\n    schoolName: 'Canadian International School',\r\n    studentName: 'Neel Madhave',\r\n    schoolLocation: 'Cambodia',\r\n    status: 'Completed',\r\n    statusColor: 'bg-green-100 text-green-800'\r\n  },\r\n  {\r\n    id: 2,\r\n    date: '04-08-2025',\r\n    verifiedBatch: true,\r\n    schoolName: 'Canadian International School',\r\n    studentName: 'Jamiul Burnett',\r\n    schoolLocation: 'Cambodia',\r\n    status: 'Pending',\r\n    statusColor: 'bg-red-100 text-red-800'\r\n  },\r\n  {\r\n    id: 3,\r\n    date: '04-08-2025',\r\n    verifiedBatch: true,\r\n    schoolName: 'Canadian International School',\r\n    studentName: 'Juan Mitchell',\r\n    schoolLocation: 'Cambodia',\r\n    status: 'Approved',\r\n    statusColor: 'bg-blue-100 text-blue-800'\r\n  },\r\n  {\r\n    id: 4,\r\n    date: '04-08-2025',\r\n    verifiedBatch: true,\r\n    schoolName: 'Canadian International School',\r\n    studentName: 'Barry Dick',\r\n    schoolLocation: 'Cambodia',\r\n    status: 'Pending',\r\n    statusColor: 'bg-red-100 text-red-800'\r\n  },\r\n  {\r\n    id: 5,\r\n    date: '04-08-2025',\r\n    verifiedBatch: true,\r\n    schoolName: 'Canadian International School',\r\n    studentName: 'Ronald Taylor',\r\n    schoolLocation: 'Cambodia',\r\n    status: 'Completed',\r\n    statusColor: 'bg-green-100 text-green-800'\r\n  },\r\n  {\r\n    id: 6,\r\n    date: '04-08-2025',\r\n    verifiedBatch: true,\r\n    schoolName: 'Canadian International School',\r\n    studentName: 'Jacob Hunter',\r\n    schoolLocation: 'Cambodia',\r\n    status: 'Completed',\r\n    statusColor: 'bg-green-100 text-green-800'\r\n  },\r\n];\r\n\r\nexport default function Dashboard() {\r\n  return (\r\n    <ClientOnly\r\n      fallback={\r\n        <div className=\"dashboard-container\">\r\n          <div className=\"dashboard-header\">\r\n            <div className=\"h-6 w-32 bg-gray-200 animate-pulse rounded\" />\r\n            <div className=\"h-4 w-24 bg-gray-200 animate-pulse rounded\" />\r\n          </div>\r\n          <div className=\"kpi-grid\">\r\n            {[...Array(4)].map((_, index) => (\r\n              <Card key={index}>\r\n                <CardContent className=\"p-6\">\r\n                  <div className=\"h-14 bg-gray-200 rounded animate-pulse\" />\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      }\r\n    >\r\n      <section className=\"dashboard-container\" aria-live=\"polite\">\r\n        {/* Page Header */}\r\n        <div className=\"dashboard-header\">\r\n          <div>\r\n            <h1 className=\"dashboard-title\">DASHBOARDS</h1>\r\n            <p className=\"dashboard-subtitle\">School Branches</p>\r\n          </div>\r\n          <div className=\"breadcrumb\">\r\n            <span>Dashboards</span>\r\n            <span>/</span>\r\n            <span className=\"breadcrumb-current\">Dashboards</span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* KPI Cards */}\r\n        <div className=\"kpi-grid\">\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"kpi-card-content\">\r\n                <div>\r\n                  <p className=\"kpi-label\">Students Register</p>\r\n                  <p className=\"kpi-value\">1,235</p>\r\n                </div>\r\n                <div className=\"kpi-icon kpi-icon-blue\">\r\n                  <Users className=\"w-6 h-6 text-blue-600\" />\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"kpi-card-content\">\r\n                <div>\r\n                  <p className=\"kpi-label\">Export Submit Printing</p>\r\n                  <p className=\"kpi-value\">35,723</p>\r\n                </div>\r\n                <div className=\"kpi-icon kpi-icon-blue\">\r\n                  <GraduationCap className=\"w-6 h-6 text-blue-600\" />\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"kpi-card-content\">\r\n                <div>\r\n                  <p className=\"kpi-label\">Pending Verification</p>\r\n                  <p className=\"kpi-value\">1000</p>\r\n                </div>\r\n                <div className=\"kpi-icon kpi-icon-blue\">\r\n                  <Clock className=\"w-6 h-6 text-blue-600\" />\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"kpi-card-content\">\r\n                <div>\r\n                  <p className=\"kpi-label\">Completed Printing</p>\r\n                  <p className=\"kpi-value\">1000</p>\r\n                </div>\r\n                <div className=\"kpi-icon kpi-icon-blue\">\r\n                  <CheckCircle className=\"w-6 h-6 text-blue-600\" />\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Charts Section */}\r\n        <div className=\"charts-grid\">\r\n          {/* Work Status Pie Chart */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"chart-title\">Work Status</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"chart-container\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <PieChart>\r\n                    <Pie\r\n                      data={workStatusData}\r\n                      cx=\"50%\"\r\n                      cy=\"50%\"\r\n                      innerRadius={60}\r\n                      outerRadius={80}\r\n                      paddingAngle={5}\r\n                      dataKey=\"value\"\r\n                    >\r\n                      {workStatusData.map((entry, index) => (\r\n                        <Cell key={`cell-${index}`} fill={entry.color} />\r\n                      ))}\r\n                    </Pie>\r\n                    <Tooltip />\r\n                  </PieChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n              <div className=\"chart-legend\">\r\n                {workStatusData.map((item, index) => (\r\n                  <div key={index} className=\"legend-item\">\r\n                    <div className=\"legend-item-content\">\r\n                      <div\r\n                        className={`legend-indicator ${item.name === 'Approved' ? 'legend-approved' :\r\n                            item.name === 'Completed' ? 'legend-completed' :\r\n                              'legend-pending'\r\n                          }`}\r\n                      ></div>\r\n                      <span>{item.name}</span>\r\n                    </div>\r\n                    <span className=\"legend-value\">{item.value}%</span>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Printing Turnaround Time Line Chart */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"chart-title\">Printing Turnaround Time</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"chart-container\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <LineChart data={printingTurnaroundData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"month\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Line\r\n                      type=\"monotone\"\r\n                      dataKey=\"time\"\r\n                      stroke=\"#3B82F6\"\r\n                      strokeWidth={2}\r\n                      dot={{ fill: '#3B82F6' }}\r\n                    />\r\n                  </LineChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Error/Rejected Entries Overview Bar Chart */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"chart-title\">Error/Rejected Entries Overview</CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"chart-container\">\r\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n                  <BarChart data={entriesOverviewData}>\r\n                    <CartesianGrid strokeDasharray=\"3 3\" />\r\n                    <XAxis dataKey=\"month\" />\r\n                    <YAxis />\r\n                    <Tooltip />\r\n                    <Legend />\r\n                    <Bar dataKey=\"invalid\" fill=\"#EF4444\" name=\"Invalid Entries\" />\r\n                    <Bar dataKey=\"missing\" fill=\"#F59E0B\" name=\"Missing Entries\" />\r\n                    <Bar dataKey=\"incomplete\" fill=\"#3B82F6\" name=\"Incomplete Entries\" />\r\n                  </BarChart>\r\n                </ResponsiveContainer>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Student Requests Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"chart-title\">Student Requests</CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"w-full\">\r\n                <thead>\r\n                  <tr className=\"border-b\">\r\n                    <th className=\"text-left p-4 font-medium text-gray-600\">ID</th>\r\n                    <th className=\"text-left p-4 font-medium text-gray-600\">Date</th>\r\n                    <th className=\"text-left p-4 font-medium text-gray-600\">School Name</th>\r\n                    <th className=\"text-left p-4 font-medium text-gray-600\">Student Name</th>\r\n                    <th className=\"text-left p-4 font-medium text-gray-600\">Location</th>\r\n                    <th className=\"text-left p-4 font-medium text-gray-600\">Status</th>\r\n                    <th className=\"text-left p-4 font-medium text-gray-600\">Actions</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {studentRequestsData.map((request) => (\r\n                    <tr key={request.id} className=\"border-b hover:bg-gray-50\">\r\n                      <td className=\"p-4\">{request.id}</td>\r\n                      <td className=\"p-4\">{request.date}</td>\r\n                      <td className=\"p-4\">{request.schoolName}</td>\r\n                      <td className=\"p-4\">{request.studentName}</td>\r\n                      <td className=\"p-4\">{request.schoolLocation}</td>\r\n                      <td className=\"p-4\">\r\n                        <Badge className={request.statusColor}>\r\n                          {request.status}\r\n                        </Badge>\r\n                      </td>\r\n                      <td className=\"p-4\">\r\n                        <div className=\"flex space-x-2\">\r\n                          <Button variant=\"outline\" size=\"sm\">\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"outline\" size=\"sm\">\r\n                            <Edit className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n      );\r\n}","usedDeprecatedRules":[]},{"filePath":"d:\\New folder\\idcard\\src\\app\\(app)\\manage-students\\list-students\\page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchStudents'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":32,"suggestions":[{"desc":"Update the dependencies array to be: [statusFilter, searchTerm, fetchStudents]","fix":{"range":[782,808],"text":"[statusFilter, searchTerm, fetchStudents]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":175,"column":29,"nodeType":"JSXOpeningElement","endLine":179,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport Link from 'next/link';\r\n\r\ninterface Student {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  rollNumber: string;\r\n  class: string;\r\n  section: string;\r\n  photoUrl: string;\r\n  status: string;\r\n  verified: boolean;\r\n  school: {\r\n    schoolName: string;\r\n    address: string;\r\n    city: string;\r\n  };\r\n}\r\n\r\nexport default function StudentListPage() {\r\n  const router = useRouter();\r\n  const [students, setStudents] = useState<Student[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n\r\n  useEffect(() => {\r\n    fetchStudents();\r\n  }, [statusFilter, searchTerm]);\r\n\r\n  const fetchStudents = async () => {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      if (statusFilter !== 'all') params.append('status', statusFilter);\r\n      if (searchTerm) params.append('search', searchTerm);\r\n\r\n      const response = await fetch(`/api/students?${params.toString()}`);\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        setStudents(result.data);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching students:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleDelete = async (id: string) => {\r\n    if (!confirm('Are you sure you want to delete this student?')) return;\r\n\r\n    try {\r\n      const response = await fetch(`/api/students/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (response.ok) {\r\n        setStudents(students.filter((s) => s.id !== id));\r\n        alert('Student deleted successfully');\r\n      } else {\r\n        alert('Failed to delete student');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting student:', error);\r\n      alert('Error deleting student');\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status.toLowerCase()) {\r\n      case 'approved':\r\n      case 'completed':\r\n        return 'bg-green-500';\r\n      case 'inactive':\r\n      case 'not printed':\r\n        return 'bg-red-500';\r\n      default:\r\n        return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-lg\">Loading...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-6 flex items-center justify-between\">\r\n          <div>\r\n            <div className=\"text-sm text-gray-500 mb-2\">\r\n              Dashboards / Manage Students / List Students\r\n            </div>\r\n            <h1 className=\"text-2xl font-semibold\">LIST STUDENTS</h1>\r\n          </div>\r\n          <Link\r\n            href=\"/manage-students/add-students\"\r\n            className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors flex items-center gap-2\"\r\n          >\r\n            <span className=\"text-xl\">+</span> Add Student\r\n          </Link>\r\n        </div>\r\n\r\n        {/* Status Overview */}\r\n        <div className=\"bg-white rounded-lg shadow p-4 mb-6\">\r\n          <h3 className=\"font-semibold mb-3\">Status Overview</h3>\r\n          <div className=\"flex gap-4\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-4 h-4 bg-green-500 rounded-full\"></div>\r\n              <span className=\"text-sm\">Approved ({students.filter(s => s.status === 'approved').length})</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <div className=\"w-4 h-4 bg-red-500 rounded-full\"></div>\r\n              <span className=\"text-sm\">Inactive ({students.filter(s => s.status === 'inactive').length})</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Search and Filter */}\r\n        <div className=\"bg-white rounded-lg shadow mb-6\">\r\n          <div className=\"p-4 border-b\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search...\"\r\n              value={searchTerm}\r\n              onChange={(e) => setSearchTerm(e.target.value)}\r\n              className=\"w-full md:w-96 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n            />\r\n          </div>\r\n\r\n          {/* Table */}\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full\">\r\n              <thead className=\"bg-gray-50 border-b\">\r\n                <tr>\r\n                  <th className=\"px-4 py-3 text-left\">\r\n                    <input \r\n                      type=\"checkbox\" \r\n                      className=\"rounded\"\r\n                      aria-label=\"Select all students\"\r\n                    />\r\n                  </th>\r\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">School Type</th>\r\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">School Code</th>\r\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">School Name</th>\r\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">School Location</th>\r\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Last Updated</th>\r\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Status</th>\r\n                  <th className=\"px-4 py-3 text-left text-sm font-medium text-gray-700\">Action</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody className=\"divide-y divide-gray-200\">\r\n                {students.map((student) => (\r\n                  <tr key={student.id} className=\"hover:bg-gray-50\">\r\n                    <td className=\"px-4 py-3\">\r\n                      <input \r\n                        type=\"checkbox\" \r\n                        className=\"rounded\"\r\n                        aria-label={`Select ${student.firstName} ${student.lastName}`}\r\n                      />\r\n                    </td>\r\n                    <td className=\"px-4 py-3\">\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <div className=\"w-10 h-10 rounded-full bg-gray-200 overflow-hidden flex-shrink-0\">\r\n                          {student.photoUrl ? (\r\n                            <img\r\n                              src={student.photoUrl}\r\n                              alt={`${student.firstName} ${student.lastName}`}\r\n                              className=\"w-full h-full object-cover\"\r\n                            />\r\n                          ) : (\r\n                            <div className=\"w-full h-full flex items-center justify-center text-gray-400\">\r\n                              👤\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                        <span className=\"text-sm\">\r\n                          {student.class} - {student.section || 'N/A'}\r\n                        </span>\r\n                      </div>\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm\">{student.rollNumber}</td>\r\n                    <td className=\"px-4 py-3 text-sm\">\r\n                      {student.firstName} {student.lastName}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm\">\r\n                      {student.school.city}\r\n                    </td>\r\n                    <td className=\"px-4 py-3 text-sm\">\r\n                      {new Date().toLocaleDateString('en-GB', {\r\n                        day: '2-digit',\r\n                        month: '2-digit',\r\n                        year: 'numeric',\r\n                      })}\r\n                    </td>\r\n                    <td className=\"px-4 py-3\">\r\n                      <span\r\n                        className={`px-3 py-1 rounded-full text-xs text-white ${getStatusColor(\r\n                          student.status\r\n                        )}`}\r\n                      >\r\n                        {student.status}\r\n                      </span>\r\n                    </td>\r\n                    <td className=\"px-4 py-3\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <button\r\n                          onClick={() => router.push(`/manage-students/view/${student.id}`)}\r\n                          className=\"p-2 text-blue-600 hover:bg-blue-50 rounded transition-colors\"\r\n                          title=\"View\"\r\n                          aria-label={`View ${student.firstName} ${student.lastName}`}\r\n                        >\r\n                          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\r\n                          </svg>\r\n                        </button>\r\n                        <button\r\n                          onClick={() => router.push(`/manage-students/edit/${student.id}`)}\r\n                          className=\"p-2 text-blue-600 hover:bg-blue-50 rounded transition-colors\"\r\n                          title=\"Edit\"\r\n                          aria-label={`Edit ${student.firstName} ${student.lastName}`}\r\n                        >\r\n                          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z\" />\r\n                          </svg>\r\n                        </button>\r\n                        <button\r\n                          onClick={() => handleDelete(student.id)}\r\n                          className=\"p-2 text-red-600 hover:bg-red-50 rounded transition-colors\"\r\n                          title=\"Delete\"\r\n                          aria-label={`Delete ${student.firstName} ${student.lastName}`}\r\n                        >\r\n                          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16\" />\r\n                          </svg>\r\n                        </button>\r\n                      </div>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          {students.length === 0 && (\r\n            <div className=\"text-center py-12 text-gray-500\">\r\n              No students found. Add your first student to get started.\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"text-center text-sm text-gray-500\">\r\n          2025 © Wezant. Design & Developed by ❤️ Zenoids\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\New folder\\idcard\\src\\app\\(app)\\manage-students\\view\\[id]\\page.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":154,"column":23,"nodeType":"JSXOpeningElement","endLine":158,"endColumn":25},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":329,"column":21,"nodeType":"JSXOpeningElement","endLine":333,"endColumn":23}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useParams, useRouter } from 'next/navigation';\r\n\r\ninterface StudentData {\r\n  id: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  fatherName: string;\r\n  phone: string;\r\n  parentPhone: string;\r\n  gender: string;\r\n  dob: string;\r\n  rollNumber: string;\r\n  bloodGroup: string;\r\n  photoUrl: string;\r\n  class: string;\r\n  section: string;\r\n  parentGuardianName: string;\r\n  status: string;\r\n  verified: boolean;\r\n  school: {\r\n    schoolName: string;\r\n    address: string;\r\n    city: string;\r\n    state: string;\r\n    pinCode: string;\r\n    phoneNo: string;\r\n    email: string;\r\n    website: string;\r\n  };\r\n}\r\n\r\nexport default function StudentViewPage() {\r\n  const params = useParams();\r\n  const router = useRouter();\r\n  const [student, setStudent] = useState<StudentData | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [printStatus, setPrintStatus] = useState('Printed');\r\n  const [verifyStatus, setVerifyStatus] = useState('Verified');\r\n\r\n  useEffect(() => {\r\n    const fetchStudent = async () => {\r\n      try {\r\n        const response = await fetch(`/api/students/${params.id}`);\r\n        if (response.ok) {\r\n          const result = await response.json();\r\n          setStudent(result.data);\r\n          setPrintStatus(result.data.status || 'Not Printed');\r\n          setVerifyStatus(result.data.verified ? 'Verified' : 'Not Verified');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching student:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (params.id) {\r\n      fetchStudent();\r\n    }\r\n  }, [params.id]);\r\n\r\n  const handlePrint = () => {\r\n    window.print();\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('status', printStatus);\r\n      formData.append('verified', verifyStatus === 'Verified' ? 'true' : 'false');\r\n\r\n      const response = await fetch(`/api/students/${params.id}`, {\r\n        method: 'PUT',\r\n        body: formData,\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('Status updated successfully!');\r\n        router.push('/manage-students/list');\r\n      } else {\r\n        alert('Failed to update status');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating student:', error);\r\n      alert('Error updating student');\r\n    }\r\n  };\r\n\r\n  const handleEdit = () => {\r\n    router.push(`/manage-students/edit/${params.id}`);\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    router.push('/manage-students/list');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-lg\">Loading...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!student) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-lg\">Student not found</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const fullName = `${student.firstName} ${student.lastName}`;\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50\">\r\n      {/* Print Button Bar - Hidden when printing */}\r\n      <div className=\"no-print fixed bottom-8 left-1/2 transform -translate-x-1/2 bg-white shadow-lg rounded-lg px-6 py-4 flex gap-4 z-50 border border-gray-200\">\r\n        <button\r\n          onClick={handlePrint}\r\n          className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors font-medium\"\r\n        >\r\n          Print\r\n        </button>\r\n        <button\r\n          onClick={handleSkip}\r\n          className=\"px-6 py-2 bg-gray-200 text-gray-700 rounded-md hover:bg-gray-300 transition-colors font-medium\"\r\n        >\r\n          Skip Print\r\n        </button>\r\n      </div>\r\n\r\n      <div className=\"max-w-7xl mx-auto px-4 py-8\">\r\n        {/* Breadcrumb - Hidden when printing */}\r\n        <div className=\"no-print mb-4 text-sm text-gray-500\">\r\n          Dashboards / Manage Student / Student View\r\n        </div>\r\n\r\n        <h1 className=\"text-2xl font-semibold mb-6\">STUDENT VIEW</h1>\r\n\r\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\r\n          {/* Left Section - Student Details */}\r\n          <div className=\"lg:col-span-2\">\r\n            <div className=\"bg-white rounded-lg shadow p-6\">\r\n              <div className=\"flex gap-6 mb-8\">\r\n                {/* Profile Photo */}\r\n                <div className=\"flex-shrink-0\">\r\n                  <div className=\"w-32 h-32 border-4 border-gray-200 rounded-lg overflow-hidden bg-gray-100\">\r\n                    {student.photoUrl ? (\r\n                      <img\r\n                        src={student.photoUrl}\r\n                        alt={fullName}\r\n                        className=\"w-full h-full object-cover\"\r\n                      />\r\n                    ) : (\r\n                      <div className=\"w-full h-full flex items-center justify-center text-4xl text-gray-400\">\r\n                        👤\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  {/* Buttons - Hidden when printing */}\r\n                  <div className=\"no-print mt-3 space-y-2\">\r\n                    <button\r\n                      onClick={() => setPrintStatus('Printed')}\r\n                      className=\"w-full px-4 py-2 bg-green-500 text-white text-sm rounded-md hover:bg-green-600 transition-colors\"\r\n                    >\r\n                      Printed\r\n                    </button>\r\n                    <button\r\n                      onClick={handleEdit}\r\n                      className=\"w-full px-4 py-2 bg-blue-600 text-white text-sm rounded-md hover:bg-blue-700 transition-colors\"\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Basic Info */}\r\n                <div className=\"flex-1\">\r\n                  <div className=\"flex items-center gap-2 mb-4\">\r\n                    <h2 className=\"text-2xl font-semibold text-gray-800\">{fullName}</h2>\r\n                    {student.verified && (\r\n                      <svg className=\"w-6 h-6 text-blue-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                        <path\r\n                          fillRule=\"evenodd\"\r\n                          d=\"M6.267 3.455a3.066 3.066 0 001.745-.723 3.066 3.066 0 013.976 0 3.066 3.066 0 001.745.723 3.066 3.066 0 012.812 2.812c.051.643.304 1.254.723 1.745a3.066 3.066 0 010 3.976 3.066 3.066 0 00-.723 1.745 3.066 3.066 0 01-2.812 2.812 3.066 3.066 0 00-1.745.723 3.066 3.066 0 01-3.976 0 3.066 3.066 0 00-1.745-.723 3.066 3.066 0 01-2.812-2.812 3.066 3.066 0 00-.723-1.745 3.066 3.066 0 010-3.976 3.066 3.066 0 00.723-1.745 3.066 3.066 0 012.812-2.812zm7.44 5.252a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\"\r\n                          clipRule=\"evenodd\"\r\n                        />\r\n                      </svg>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-2 gap-4\">\r\n                    <div>\r\n                      <label className=\"text-sm text-gray-500\">S/o, D/o :</label>\r\n                      <p className=\"font-medium text-gray-800\">{student.fatherName}</p>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"text-sm text-gray-500\">DOB :</label>\r\n                      <p className=\"font-medium text-gray-800\">\r\n                        {new Date(student.dob).toLocaleDateString('en-GB', {\r\n                          day: '2-digit',\r\n                          month: '2-digit',\r\n                          year: 'numeric',\r\n                        })}\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"text-sm text-gray-500\">Gender :</label>\r\n                      <p className=\"font-medium text-gray-800\">{student.gender}</p>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"text-sm text-gray-500\">Blood Group :</label>\r\n                      <p className=\"font-medium text-gray-800\">{student.bloodGroup}</p>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"text-sm text-gray-500\">Roll No :</label>\r\n                      <p className=\"font-medium text-gray-800\">{student.rollNumber}</p>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"text-sm text-gray-500\">Class :</label>\r\n                      <p className=\"font-medium text-gray-800\">{student.class}</p>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"text-sm text-gray-500\">Section :</label>\r\n                      <p className=\"font-medium text-gray-800\">{student.section}</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              {/* School Details Section */}\r\n              <div className=\"border-t pt-6\">\r\n                <h3 className=\"text-lg font-semibold mb-4\">School Details:</h3>\r\n                <div>\r\n                  <p className=\"font-semibold text-gray-800 mb-2\">{student.school.schoolName}</p>\r\n                  <p className=\"text-sm text-gray-600\">\r\n                    # {student.school.address}, {student.school.city}\r\n                  </p>\r\n                  <p className=\"text-sm text-gray-600\">Call: {student.school.phoneNo}</p>\r\n                  <p className=\"text-sm text-gray-600\">Email: {student.school.email}</p>\r\n                  <p className=\"text-sm text-gray-600\">Website: {student.school.website}</p>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Parent/Guardian Information */}\r\n              <div className=\"border-t pt-6 mt-6\">\r\n                <h3 className=\"text-lg font-semibold mb-4\">Parents/Guardian Information:</h3>\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <label className=\"text-sm text-gray-500\">Name:</label>\r\n                    <p className=\"font-medium text-gray-800\">\r\n                      {student.parentGuardianName || student.fatherName}\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm text-gray-500\">Phone No. :</label>\r\n                    <p className=\"font-medium text-gray-800\">\r\n                      {student.parentPhone || student.phone}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Status Section - Hidden when printing */}\r\n            <div className=\"no-print bg-white rounded-lg shadow p-6 mt-6\">\r\n              <div className=\"flex items-center gap-6\">\r\n                <span className=\"text-gray-700 font-medium\">Status</span>\r\n                \r\n                <select\r\n                  value={printStatus}\r\n                  onChange={(e) => setPrintStatus(e.target.value)}\r\n                  aria-label=\"Print Status\"\r\n                  className=\"px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                >\r\n                  <option value=\"Printed\">Printed</option>\r\n                  <option value=\"Not Printed\">Not Printed</option>\r\n                </select>\r\n\r\n                <select\r\n                  value={verifyStatus}\r\n                  onChange={(e) => setVerifyStatus(e.target.value)}\r\n                  aria-label=\"Verification Status\"\r\n                  className=\"px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                >\r\n                  <option value=\"Verified\">Verified</option>\r\n                  <option value=\"Not Verified\">Not Verified</option>\r\n                </select>\r\n\r\n                <button\r\n                  onClick={handleSubmit}\r\n                  className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors font-medium\"\r\n                >\r\n                  Submit\r\n                </button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Right Section - ID Card Preview */}\r\n          <div className=\"lg:col-span-1\">\r\n            <div className=\"sticky top-6\">\r\n              <h3 className=\"text-lg font-semibold mb-4\">Horizontal</h3>\r\n              <div className=\"bg-gradient-to-br from-purple-600 to-indigo-700 rounded-xl p-6 text-white text-center border-4 border-dashed border-white shadow-xl\">\r\n                {/* School Logo */}\r\n                <div className=\"w-16 h-16 bg-white rounded-full flex items-center justify-center mx-auto mb-3 border-4 border-purple-800\">\r\n                  <span className=\"text-2xl font-bold text-purple-700\">S</span>\r\n                </div>\r\n\r\n                {/* School Name */}\r\n                <div className=\"text-red-400 font-bold text-lg mb-4\">\r\n                  {student.school.schoolName.toUpperCase()}\r\n                </div>\r\n\r\n                {/* Student Photo */}\r\n                <div className=\"w-24 h-24 bg-green-100 rounded-lg mx-auto mb-3 border-2 border-white overflow-hidden\">\r\n                  {student.photoUrl ? (\r\n                    <img\r\n                      src={student.photoUrl}\r\n                      alt={fullName}\r\n                      className=\"w-full h-full object-cover\"\r\n                    />\r\n                  ) : (\r\n                    <div className=\"w-full h-full flex items-center justify-center text-3xl text-gray-500\">\r\n                      👤\r\n                    </div>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Student Info */}\r\n                <div className=\"text-xs mb-1 font-semibold\">STUDENT ID: {student.rollNumber}</div>\r\n                <div className=\"text-sm font-bold mb-1\">STUDENT NAME</div>\r\n                <div className=\"text-xs mb-2\">\r\n                  Father&apos;s Name : <span className=\"font-semibold\">{student.fatherName}</span>\r\n                </div>\r\n                <div className=\"text-xs\">\r\n                  Class Name : <span className=\"font-semibold\">{student.class}</span>\r\n                </div>\r\n                <div className=\"text-xs\">\r\n                  Class Roll : <span className=\"font-semibold\">{student.rollNumber}</span>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Print Styles */}\r\n      <style jsx global>{`\r\n        @media print {\r\n          .no-print {\r\n            display: none !important;\r\n          }\r\n          \r\n          body {\r\n            print-color-adjust: exact;\r\n            -webkit-print-color-adjust: exact;\r\n          }\r\n          \r\n          @page {\r\n            margin: 1cm;\r\n          }\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\New folder\\idcard\\src\\app\\(app)\\settings\\page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchSettings'. Either include it or remove the dependency array.","line":47,"column":6,"nodeType":"ArrayExpression","endLine":47,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [fetchSettings]","fix":{"range":[1223,1225],"text":"[fetchSettings]"}}]},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":282,"column":25,"nodeType":"JSXOpeningElement","endLine":286,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { useEffect, useState } from 'react';\r\nimport { useRouter } from 'next/navigation';\r\nimport { useTheme } from '@/context/ThemeContext';\r\n\r\ninterface UserSettings {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  avatar: string;\r\n  theme: string;\r\n  notifications: boolean;\r\n  role: string;\r\n}\r\n\r\nexport default function SettingsPage() {\r\n  const router = useRouter();\r\n  const { theme: currentTheme, effectiveTheme, setTheme } = useTheme();\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [activeTab, setActiveTab] = useState<'profile' | 'security' | 'preferences'>('profile');\r\n  \r\n  const [settings, setSettings] = useState<UserSettings>({\r\n    id: '',\r\n    name: '',\r\n    email: '',\r\n    phone: '',\r\n    avatar: '',\r\n    theme: 'light',\r\n    notifications: true,\r\n    role: 'ADMIN',\r\n  });\r\n\r\n  const [passwordData, setPasswordData] = useState({\r\n    currentPassword: '',\r\n    newPassword: '',\r\n    confirmPassword: '',\r\n  });\r\n\r\n  const [avatarFile, setAvatarFile] = useState<File | null>(null);\r\n  const [avatarPreview, setAvatarPreview] = useState<string>('');\r\n\r\n  useEffect(() => {\r\n    fetchSettings();\r\n  }, []);\r\n\r\n  // Sync theme from context to settings\r\n  useEffect(() => {\r\n    setSettings(prev => ({ ...prev, theme: currentTheme }));\r\n  }, [currentTheme]);\r\n\r\n  const fetchSettings = async () => {\r\n    try {\r\n      const response = await fetch('/api/settings');\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        setSettings(result.data);\r\n        setAvatarPreview(result.data.avatar || '');\r\n        // Set theme from API\r\n        setTheme(result.data.theme || 'light');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching settings:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type, checked } = e.target;\r\n    \r\n    // Handle theme change immediately\r\n    if (name === 'theme') {\r\n      const newTheme = value as 'light' | 'dark' | 'system';\r\n      setTheme(newTheme); // Apply theme instantly\r\n      setSettings(prev => ({ ...prev, theme: newTheme }));\r\n      // Auto-save theme preference\r\n      saveThemePreference(newTheme);\r\n    } else {\r\n      setSettings(prev => ({\r\n        ...prev,\r\n        [name]: type === 'checkbox' ? checked : value,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const saveThemePreference = async (theme: string) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('name', settings.name);\r\n      formData.append('email', settings.email);\r\n      formData.append('phone', settings.phone);\r\n      formData.append('theme', theme);\r\n      formData.append('notifications', settings.notifications.toString());\r\n      \r\n      if (avatarFile) {\r\n        formData.append('avatar', avatarFile);\r\n      }\r\n\r\n      await fetch('/api/settings', {\r\n        method: 'PUT',\r\n        body: formData,\r\n      });\r\n    } catch (error) {\r\n      console.error('Error saving theme:', error);\r\n    }\r\n  };\r\n\r\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setPasswordData(prev => ({\r\n      ...prev,\r\n      [name]: value,\r\n    }));\r\n  };\r\n\r\n  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const file = e.target.files?.[0];\r\n    if (file) {\r\n      setAvatarFile(file);\r\n      const reader = new FileReader();\r\n      reader.onloadend = () => {\r\n        setAvatarPreview(reader.result as string);\r\n      };\r\n      reader.readAsDataURL(file);\r\n    }\r\n  };\r\n\r\n  const handleProfileUpdate = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setSaving(true);\r\n\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('name', settings.name);\r\n      formData.append('email', settings.email);\r\n      formData.append('phone', settings.phone);\r\n      formData.append('theme', settings.theme);\r\n      formData.append('notifications', settings.notifications.toString());\r\n      \r\n      if (avatarFile) {\r\n        formData.append('avatar', avatarFile);\r\n      }\r\n\r\n      const response = await fetch('/api/settings', {\r\n        method: 'PUT',\r\n        body: formData,\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('Profile updated successfully!');\r\n        fetchSettings();\r\n      } else {\r\n        const error = await response.json();\r\n        alert(error.error || 'Failed to update profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n      alert('Error updating profile');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handlePasswordUpdate = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (passwordData.newPassword !== passwordData.confirmPassword) {\r\n      alert('New passwords do not match!');\r\n      return;\r\n    }\r\n\r\n    if (passwordData.newPassword.length < 8) {\r\n      alert('Password must be at least 8 characters long');\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n\r\n    try {\r\n      const response = await fetch('/api/settings/password', {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          currentPassword: passwordData.currentPassword,\r\n          newPassword: passwordData.newPassword,\r\n        }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        alert('Password updated successfully!');\r\n        setPasswordData({\r\n          currentPassword: '',\r\n          newPassword: '',\r\n          confirmPassword: '',\r\n        });\r\n      } else {\r\n        const error = await response.json();\r\n        alert(error.error || 'Failed to update password');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating password:', error);\r\n      alert('Error updating password');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"flex items-center justify-center min-h-screen\">\r\n        <div className=\"text-lg\">Loading settings...</div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-300\">\r\n      <div className=\"max-w-5xl mx-auto px-4 py-8\">\r\n        {/* Header */}\r\n        <div className=\"mb-6\">\r\n          <div className=\"text-sm text-gray-500 dark:text-gray-400 mb-2\">Dashboard / Settings</div>\r\n          <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-gray-100\">SETTINGS</h1>\r\n        </div>\r\n\r\n        {/* Tabs */}\r\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow mb-6 transition-colors duration-300\">\r\n          <div className=\"border-b border-gray-200 dark:border-gray-700\">\r\n            <nav className=\"flex space-x-8 px-6\" aria-label=\"Tabs\">\r\n              <button\r\n                onClick={() => setActiveTab('profile')}\r\n                className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\r\n                  activeTab === 'profile'\r\n                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'\r\n                    : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'\r\n                }`}\r\n                aria-label=\"Profile Settings Tab\"\r\n              >\r\n                Profile Settings\r\n              </button>\r\n              <button\r\n                onClick={() => setActiveTab('security')}\r\n                className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\r\n                  activeTab === 'security'\r\n                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'\r\n                    : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'\r\n                }`}\r\n                aria-label=\"Security Tab\"\r\n              >\r\n                Security\r\n              </button>\r\n              <button\r\n                onClick={() => setActiveTab('preferences')}\r\n                className={`py-4 px-1 border-b-2 font-medium text-sm transition-colors ${\r\n                  activeTab === 'preferences'\r\n                    ? 'border-blue-500 text-blue-600 dark:text-blue-400'\r\n                    : 'border-transparent text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 hover:border-gray-300 dark:hover:border-gray-600'\r\n                }`}\r\n                aria-label=\"Preferences Tab\"\r\n              >\r\n                Preferences\r\n              </button>\r\n            </nav>\r\n          </div>\r\n\r\n          {/* Profile Settings Tab */}\r\n          {activeTab === 'profile' && (\r\n            <form onSubmit={handleProfileUpdate} className=\"p-6\">\r\n              <div className=\"space-y-6\">\r\n                {/* Avatar Upload */}\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Profile Picture\r\n                  </label>\r\n                  <div className=\"flex items-center gap-6\">\r\n                    <div className=\"w-24 h-24 rounded-full bg-gray-200 dark:bg-gray-700 overflow-hidden\">\r\n                      {avatarPreview ? (\r\n                        <img\r\n                          src={avatarPreview}\r\n                          alt=\"Profile\"\r\n                          className=\"w-full h-full object-cover\"\r\n                        />\r\n                      ) : (\r\n                        <div className=\"w-full h-full flex items-center justify-center text-4xl text-gray-400 dark:text-gray-500\">\r\n                          👤\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                    <div>\r\n                      <input\r\n                        type=\"file\"\r\n                        id=\"avatar\"\r\n                        accept=\"image/*\"\r\n                        onChange={handleAvatarChange}\r\n                        className=\"hidden\"\r\n                        aria-label=\"Upload profile picture\"\r\n                      />\r\n                      <label\r\n                        htmlFor=\"avatar\"\r\n                        className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 cursor-pointer inline-block transition-colors\"\r\n                      >\r\n                        Change Picture\r\n                      </label>\r\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-2\">\r\n                        JPG, PNG or GIF. Max size 5MB\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Name */}\r\n                <div>\r\n                  <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Full Name\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    value={settings.name}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                    placeholder=\"Enter your full name\"\r\n                    className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Email */}\r\n                <div>\r\n                  <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Email Address\r\n                  </label>\r\n                  <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    value={settings.email}\r\n                    onChange={handleInputChange}\r\n                    required\r\n                    placeholder=\"Enter your email\"\r\n                    className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Phone */}\r\n                <div>\r\n                  <label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Phone Number\r\n                  </label>\r\n                  <input\r\n                    type=\"tel\"\r\n                    id=\"phone\"\r\n                    name=\"phone\"\r\n                    value={settings.phone}\r\n                    onChange={handleInputChange}\r\n                    placeholder=\"Enter your phone number\"\r\n                    className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Role (Read-only) */}\r\n                <div>\r\n                  <label htmlFor=\"role\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Role\r\n                  </label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"role\"\r\n                    value={settings.role}\r\n                    disabled\r\n                    aria-label=\"User role (read-only)\"\r\n                    className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-100 dark:bg-gray-800 cursor-not-allowed text-gray-500 dark:text-gray-400\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"flex gap-4\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={saving}\r\n                    className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:bg-gray-400\"\r\n                  >\r\n                    {saving ? 'Saving...' : 'Save Changes'}\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={fetchSettings}\r\n                    className=\"px-6 py-2 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-md hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors\"\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          )}\r\n\r\n          {/* Security Tab */}\r\n          {activeTab === 'security' && (\r\n            <form onSubmit={handlePasswordUpdate} className=\"p-6\">\r\n              <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"text-lg font-semibold mb-4 text-gray-900 dark:text-gray-100\">Change Password</h3>\r\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400 mb-6\">\r\n                    Ensure your account is using a long, random password to stay secure.\r\n                  </p>\r\n                </div>\r\n\r\n                {/* Current Password */}\r\n                <div>\r\n                  <label htmlFor=\"currentPassword\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Current Password\r\n                  </label>\r\n                  <input\r\n                    type=\"password\"\r\n                    id=\"currentPassword\"\r\n                    name=\"currentPassword\"\r\n                    value={passwordData.currentPassword}\r\n                    onChange={handlePasswordChange}\r\n                    required\r\n                    placeholder=\"Enter current password\"\r\n                    className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n                  />\r\n                </div>\r\n\r\n                {/* New Password */}\r\n                <div>\r\n                  <label htmlFor=\"newPassword\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    New Password\r\n                  </label>\r\n                  <input\r\n                    type=\"password\"\r\n                    id=\"newPassword\"\r\n                    name=\"newPassword\"\r\n                    value={passwordData.newPassword}\r\n                    onChange={handlePasswordChange}\r\n                    required\r\n                    minLength={8}\r\n                    placeholder=\"Enter new password\"\r\n                    className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n                  />\r\n                  <p className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\r\n                    Must be at least 8 characters long\r\n                  </p>\r\n                </div>\r\n\r\n                {/* Confirm Password */}\r\n                <div>\r\n                  <label htmlFor=\"confirmPassword\" className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\r\n                    Confirm New Password\r\n                  </label>\r\n                  <input\r\n                    type=\"password\"\r\n                    id=\"confirmPassword\"\r\n                    name=\"confirmPassword\"\r\n                    value={passwordData.confirmPassword}\r\n                    onChange={handlePasswordChange}\r\n                    required\r\n                    placeholder=\"Confirm new password\"\r\n                    className=\"w-full px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"flex gap-4\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={saving}\r\n                    className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:bg-gray-400\"\r\n                  >\r\n                    {saving ? 'Updating...' : 'Update Password'}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          )}\r\n\r\n          {/* Preferences Tab */}\r\n          {activeTab === 'preferences' && (\r\n            <form onSubmit={handleProfileUpdate} className=\"p-6\">\r\n              <div className=\"space-y-6\">\r\n                {/* Theme Selection */}\r\n                <div>\r\n                  <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-4\">\r\n                    Theme Preference\r\n                  </label>\r\n                  <div className=\"space-y-3\">\r\n                    {/* Light Mode */}\r\n                    <label className={`flex items-center gap-3 p-4 border-2 rounded-lg cursor-pointer transition-all ${\r\n                      settings.theme === 'light'\r\n                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\r\n                        : 'border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'\r\n                    }`}>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"theme\"\r\n                        value=\"light\"\r\n                        checked={settings.theme === 'light'}\r\n                        onChange={handleInputChange}\r\n                        className=\"w-4 h-4 text-blue-600\"\r\n                        aria-label=\"Light mode theme\"\r\n                      />\r\n                      <span className=\"text-2xl\">☀️</span>\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\r\n                          Light Mode\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                          Use light colors for all pages\r\n                        </div>\r\n                      </div>\r\n                      {settings.theme === 'light' && (\r\n                        <div className=\"text-blue-600 dark:text-blue-400\">✓</div>\r\n                      )}\r\n                    </label>\r\n\r\n                    {/* Dark Mode */}\r\n                    <label className={`flex items-center gap-3 p-4 border-2 rounded-lg cursor-pointer transition-all ${\r\n                      settings.theme === 'dark'\r\n                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\r\n                        : 'border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'\r\n                    }`}>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"theme\"\r\n                        value=\"dark\"\r\n                        checked={settings.theme === 'dark'}\r\n                        onChange={handleInputChange}\r\n                        className=\"w-4 h-4 text-blue-600\"\r\n                        aria-label=\"Dark mode theme\"\r\n                      />\r\n                      <span className=\"text-2xl\">🌙</span>\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\r\n                          Dark Mode\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                          Use dark colors for all pages\r\n                        </div>\r\n                      </div>\r\n                      {settings.theme === 'dark' && (\r\n                        <div className=\"text-blue-600 dark:text-blue-400\">✓</div>\r\n                      )}\r\n                    </label>\r\n\r\n                    {/* System Mode */}\r\n                    <label className={`flex items-center gap-3 p-4 border-2 rounded-lg cursor-pointer transition-all ${\r\n                      settings.theme === 'system'\r\n                        ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'\r\n                        : 'border-gray-300 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700'\r\n                    }`}>\r\n                      <input\r\n                        type=\"radio\"\r\n                        name=\"theme\"\r\n                        value=\"system\"\r\n                        checked={settings.theme === 'system'}\r\n                        onChange={handleInputChange}\r\n                        className=\"w-4 h-4 text-blue-600\"\r\n                        aria-label=\"System default theme\"\r\n                      />\r\n                      <span className=\"text-2xl\">💻</span>\r\n                      <div className=\"flex-1\">\r\n                        <div className=\"text-sm font-medium text-gray-900 dark:text-gray-100\">\r\n                          System Default\r\n                        </div>\r\n                        <div className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                          Automatically switch based on system settings\r\n                        </div>\r\n                      </div>\r\n                      {settings.theme === 'system' && (\r\n                        <div className=\"text-blue-600 dark:text-blue-400\">✓</div>\r\n                      )}\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Current Theme Indicator */}\r\n                <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-700 rounded-lg p-4\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <span className=\"text-2xl\">\r\n                      {effectiveTheme === 'light' ? '☀️' : '🌙'}\r\n                    </span>\r\n                    <div>\r\n                      <p className=\"text-sm font-medium text-blue-900 dark:text-blue-100\">\r\n                        Currently using: {effectiveTheme} mode\r\n                      </p>\r\n                      <p className=\"text-xs text-blue-700 dark:text-blue-300\">\r\n                        Theme changes apply immediately and are saved automatically\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Notifications */}\r\n                <div className=\"pt-6 border-t border-gray-200 dark:border-gray-700\">\r\n                  <label className=\"flex items-center cursor-pointer\">\r\n                    <input\r\n                      type=\"checkbox\"\r\n                      name=\"notifications\"\r\n                      checked={settings.notifications}\r\n                      onChange={handleInputChange}\r\n                      className=\"mr-3 rounded w-4 h-4 text-blue-600\"\r\n                      aria-label=\"Enable notifications\"\r\n                    />\r\n                    <div>\r\n                      <span className=\"text-sm font-medium text-gray-700 dark:text-gray-200\">\r\n                        Enable Notifications\r\n                      </span>\r\n                      <p className=\"text-xs text-gray-500 dark:text-gray-400\">\r\n                        Receive notifications about updates and activities\r\n                      </p>\r\n                    </div>\r\n                  </label>\r\n                </div>\r\n\r\n                <div className=\"flex gap-4\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={saving}\r\n                    className=\"px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors disabled:bg-gray-400\"\r\n                  >\r\n                    {saving ? 'Saving...' : 'Save Preferences'}\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            </form>\r\n          )}\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"text-center text-sm text-gray-500 dark:text-gray-400\">\r\n          2020 © Wezant. Design & Develop by ❤️ Zenoids\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"d:\\New folder\\idcard\\src\\app\\(auth)\\sign-in\\page.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":64,"column":9,"nodeType":"JSXOpeningElement","endLine":68,"endColumn":11},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":166,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5241,5277],"text":"\r\n            Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5241,5277],"text":"\r\n            Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5241,5277],"text":"\r\n            Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5241,5277],"text":"\r\n            Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { signIn } from \"next-auth/react\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport Link from \"next/link\"\r\nimport { Checkbox } from \"@/components/ui/checkbox\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { useState } from \"react\"\r\nimport { useRouter } from \"next/navigation\"\r\nimport { Loader2 } from \"lucide-react\"\r\nimport { Input } from \"@/components/ui/input\"\r\n\r\nexport default function SignInPage() {\r\n  const [isSubmitting, setIsSubmitting] = useState(false)\r\n  const [error, setError] = useState(\"\")\r\n  const [formData, setFormData] = useState({\r\n    identifier: \"\",\r\n    password: \"\",\r\n    remember: false\r\n  })\r\n  const router = useRouter()\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value, type, checked } = e.target\r\n    setFormData(prev => ({\r\n      ...prev,\r\n      [name]: type === 'checkbox' ? checked : value\r\n    }))\r\n    // Clear error when user starts typing\r\n    if (error) setError(\"\")\r\n  }\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    setIsSubmitting(true)\r\n    setError(\"\")\r\n\r\n    try {\r\n      const result = await signIn('credentials', {\r\n        identifier: formData.identifier,\r\n        password: formData.password,\r\n        redirect: false,\r\n      })\r\n\r\n      if (result?.error) {\r\n        setError(result.error)\r\n      } else if (result?.ok) {\r\n        // Successful login - redirect to dashboard\r\n        router.push('/dashboard')\r\n        router.refresh() // Refresh to update session\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error)\r\n      setError(\"An unexpected error occurred\")\r\n    } finally {\r\n      setIsSubmitting(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex\">\r\n      {/* Left side - Full image */}\r\n      <div className=\"hidden lg:flex w-1/2 bg-gray-100\">\r\n        <img\r\n          src=\"/login_download.png\"\r\n          alt=\"Sign in illustration\"\r\n          className=\"object-cover w-full h-full\"\r\n        />\r\n      </div>\r\n\r\n      {/* Right side - Sign In Form */}\r\n      <div className=\"flex w-full lg:w-1/2 items-center justify-center p-8 bg-white\">\r\n        <div className=\"w-full max-w-md space-y-6\">\r\n          {/* Logo */}\r\n          <div>\r\n            <h1 className=\"text-2xl font-bold text-blue-600\">True Feedback</h1>\r\n          </div>\r\n\r\n          {/* Welcome message */}\r\n          <div>\r\n            <h2 className=\"text-lg font-semibold text-blue-600\">\r\n              Welcome Back !\r\n            </h2>\r\n            <p className=\"text-sm text-gray-500\">\r\n              Sign in to continue to True Feedback.\r\n            </p>\r\n          </div>\r\n\r\n          {/* Error message */}\r\n          {error && (\r\n            <div className=\"p-3 text-sm text-red-600 bg-red-50 border border-red-200 rounded-md\">\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          {/* Form */}\r\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n            {/* Username/Email */}\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"identifier\">Username or Email</Label>\r\n              <Input\r\n                id=\"identifier\"\r\n                name=\"identifier\"\r\n                placeholder=\"Enter username or email\"\r\n                value={formData.identifier}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            {/* Password */}\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"password\">Password</Label>\r\n              <Input\r\n                id=\"password\"\r\n                name=\"password\"\r\n                type=\"password\"\r\n                placeholder=\"Enter password\"\r\n                value={formData.password}\r\n                onChange={handleInputChange}\r\n                required\r\n              />\r\n            </div>\r\n\r\n            {/* Remember me */}\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Checkbox\r\n                id=\"remember\"\r\n                name=\"remember\"\r\n                checked={formData.remember}\r\n                onCheckedChange={(checked) =>\r\n                  setFormData(prev => ({ ...prev, remember: checked as boolean }))\r\n                }\r\n              />\r\n              <Label htmlFor=\"remember\" className=\"text-sm\">\r\n                Remember me\r\n              </Label>\r\n            </div>\r\n\r\n            {/* Submit */}\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"w-full bg-blue-700 hover:bg-blue-800 text-white\"\r\n              disabled={isSubmitting}\r\n            >\r\n              {isSubmitting ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  Logging in...\r\n                </>\r\n              ) : (\r\n                \"Log In\"\r\n              )}\r\n            </Button>\r\n          </form>\r\n\r\n          {/* Forgot password */}\r\n          <div className=\"text-center\">\r\n            <Link href=\"/forgot-password\" className=\"text-sm text-blue-600 hover:underline\">\r\n              Forgot your password?\r\n            </Link>\r\n          </div>\r\n\r\n          {/* Signup link */}\r\n          <p className=\"text-center text-sm text-gray-600\">\r\n            Don't have an account?{\" \"}\r\n            <Link href=\"/sign-up\" className=\"text-blue-600 hover:underline\">\r\n              Sign up now\r\n            </Link>\r\n          </p>\r\n\r\n          {/* Footer */}\r\n          <div className=\"text-center text-xs text-gray-500 mt-8\">\r\n            © 2025 True Feedback. All rights reserved.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","usedDeprecatedRules":[]},{"filePath":"d:\\New folder\\idcard\\src\\app\\(auth)\\verify\\[username]\\page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":124,"column":17,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3942,3980],"text":"\r\n            Didn&apos;t receive the code?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3942,3980],"text":"\r\n            Didn&lsquo;t receive the code?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3942,3980],"text":"\r\n            Didn&#39;t receive the code?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3942,3980],"text":"\r\n            Didn&rsquo;t receive the code?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\r\n\r\nimport { Input } from '@/components/ui/input';\r\nimport { useParams, useRouter } from 'next/navigation';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { Button } from '@/components/ui/button';\r\nimport { ApiResponse } from '@/types/ApiResponse';\r\nimport axios, { AxiosError } from 'axios';\r\nimport { verifySchema } from '@/schemas/verifySchema';\r\nimport {\r\n  Form,\r\n  FormField,\r\n  FormItem,\r\n  FormLabel,\r\n  FormMessage,\r\n  FormControl,\r\n} from '@/components/ui/form';\r\nimport { useToast } from '@/hooks/use-toast';\r\nimport { useForm } from 'react-hook-form';\r\nimport { useState } from 'react';\r\nimport { Loader2 } from 'lucide-react';\r\nimport * as z from 'zod';\r\n\r\nexport default function VerifyAccount() {\r\n  const router = useRouter();\r\n  const params = useParams<{ username: string }>();\r\n  const { toast } = useToast();\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  \r\n  const form = useForm<z.infer<typeof verifySchema>>({\r\n    resolver: zodResolver(verifySchema),\r\n    defaultValues: {\r\n      code: '',\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (data: z.infer<typeof verifySchema>) => {\r\n    console.log('🔄 Submitting verification code:', data.code);\r\n    console.log('👤 Username from params:', params.username);\r\n    \r\n    setIsSubmitting(true);\r\n    \r\n    try {\r\n      const response = await axios.post<ApiResponse>(`/api/verify-code`, {\r\n        username: params.username,\r\n        code: data.code,\r\n      });\r\n\r\n      console.log('✅ Verification successful:', response.data);\r\n\r\n      toast({\r\n        title: 'Success',\r\n        description: response.data.message,\r\n      });\r\n\r\n      router.replace('/sign-in');\r\n    } catch (error) {\r\n      console.error('❌ Verification failed:', error);\r\n      \r\n      const axiosError = error as AxiosError<ApiResponse>;\r\n      toast({\r\n        title: 'Verification Failed',\r\n        description:\r\n          axiosError.response?.data.message ??\r\n          'An error occurred. Please try again.',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex justify-center items-center min-h-screen bg-gray-100\">\r\n      <div className=\"w-full max-w-md p-8 space-y-8 bg-white rounded-lg shadow-md\">\r\n        <div className=\"text-center\">\r\n          <h1 className=\"text-4xl font-extrabold tracking-tight lg:text-5xl mb-6\">\r\n            Verify Your Account\r\n          </h1>\r\n          <p className=\"mb-4\">Enter the verification code sent to your email</p>\r\n          <p className=\"text-sm text-gray-600\">Username: {params.username}</p>\r\n        </div>\r\n        \r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\r\n            <FormField\r\n              name=\"code\"\r\n              control={form.control}\r\n              render={({ field }) => (\r\n                <FormItem>\r\n                  <FormLabel>Verification Code</FormLabel>\r\n                  <FormControl>\r\n                    <Input \r\n                      {...field} \r\n                      placeholder=\"Enter 6-digit code\"\r\n                      maxLength={6}\r\n                      className=\"text-center text-lg tracking-widest\"\r\n                    />\r\n                  </FormControl>\r\n                  <FormMessage />\r\n                </FormItem>\r\n              )}\r\n            />\r\n            \r\n            <Button \r\n              type=\"submit\" \r\n              className=\"w-full\" \r\n              disabled={isSubmitting}\r\n            >\r\n              {isSubmitting ? (\r\n                <>\r\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\r\n                  Verifying...\r\n                </>\r\n              ) : (\r\n                'Verify Account'\r\n              )}\r\n            </Button>\r\n          </form>\r\n        </Form>\r\n        \r\n        <div className=\"text-center\">\r\n          <p className=\"text-sm text-gray-600\">\r\n            Didn't receive the code?{' '}\r\n            <button \r\n              onClick={() => {\r\n                // You can add resend functionality here later\r\n                toast({\r\n                  title: 'Info',\r\n                  description: 'Please check your spam folder or try signing up again.',\r\n                });\r\n              }}\r\n              className=\"text-blue-600 hover:underline\"\r\n            >\r\n              Resend Code\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","usedDeprecatedRules":[]},{"filePath":"d:\\New folder\\idcard\\src\\components\\IdCardPreviewModal.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":79,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3195,3220],"text":"Father&apos;s Name: ARMAN AMAN"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3195,3220],"text":"Father&lsquo;s Name: ARMAN AMAN"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3195,3220],"text":"Father&#39;s Name: ARMAN AMAN"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3195,3220],"text":"Father&rsquo;s Name: ARMAN AMAN"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":80,"column":64,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[3285,3304],"text":"Mother&apos;s Name: AMNA"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[3285,3304],"text":"Mother&lsquo;s Name: AMNA"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[3285,3304],"text":"Mother&#39;s Name: AMNA"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[3285,3304],"text":"Mother&rsquo;s Name: AMNA"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/components/IdCardPreviewModal.tsx\r\n'use client';\r\n\r\nimport React from 'react';\r\nimport Image from 'next/image';\r\n\r\ninterface IdCardPreviewModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  schoolData: {\r\n    schoolName: string;\r\n    logoUrl?: string;\r\n    idCardDesignUrl?: string;\r\n  };\r\n}\r\n\r\nexport default function IdCardPreviewModal({ isOpen, onClose, schoolData }: IdCardPreviewModalProps) {\r\n  if (!isOpen) return null;\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\r\n      <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-4 border-b\">\r\n          <h2 className=\"text-xl font-semibold text-gray-800\">Add School - Card Design Popup</h2>\r\n          <button\r\n            onClick={onClose}\r\n            className=\"w-8 h-8 flex items-center justify-center rounded-full bg-black text-white hover:bg-gray-800\"\r\n            aria-label=\"Close modal\"\r\n          >\r\n            ×\r\n          </button>\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6\">\r\n          {/* ID Card Preview */}\r\n          <div className=\"flex justify-center mb-6\">\r\n            {schoolData.idCardDesignUrl ? (\r\n              <div className=\"relative w-80 h-[500px]\">\r\n                <Image\r\n                  src={schoolData.idCardDesignUrl}\r\n                  alt=\"ID Card Design\"\r\n                  fill\r\n                  className=\"object-contain\"\r\n                />\r\n              </div>\r\n            ) : (\r\n              <div className=\"w-80 h-[500px] bg-gradient-to-b from-purple-300 via-blue-300 to-blue-400 rounded-lg shadow-lg p-6 flex flex-col items-center\">\r\n                {/* School Logo */}\r\n                <div className=\"w-20 h-20 rounded-full bg-white flex items-center justify-center mb-4\">\r\n                  {schoolData.logoUrl ? (\r\n                    <Image\r\n                      src={schoolData.logoUrl}\r\n                      alt=\"School Logo\"\r\n                      width={60}\r\n                      height={60}\r\n                      className=\"rounded-full object-cover\"\r\n                    />\r\n                  ) : (\r\n                    <div className=\"w-16 h-16 rounded-full bg-gray-200\"></div>\r\n                  )}\r\n                </div>\r\n\r\n                {/* School Name */}\r\n                <div className=\"text-red-600 font-bold text-lg mb-6 text-center\">\r\n                  {schoolData.schoolName || 'SCHOOL NAME'}\r\n                </div>\r\n\r\n                {/* Student Photo Placeholder */}\r\n                <div className=\"w-32 h-40 bg-white rounded-lg border-4 border-teal-400 mb-4 flex items-center justify-center\">\r\n                  <div className=\"w-28 h-36 bg-gray-200 rounded\"></div>\r\n                </div>\r\n\r\n                {/* Student Info */}\r\n                <div className=\"text-center space-y-1 text-sm\">\r\n                  <div className=\"text-blue-600 font-semibold\">STUDENT ID: MPS-M-001</div>\r\n                  <div className=\"font-bold text-gray-800\">STUDENT NAME</div>\r\n                  <div className=\"text-xs text-gray-700\">Father's Name: ARMAN AMAN</div>\r\n                  <div className=\"text-xs text-gray-700\">Mother's Name: AMNA</div>\r\n                  <div className=\"text-xs text-gray-700\">Class Roll: DY25</div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          {/* Message */}\r\n          <div className=\"text-center text-gray-600 mb-6\">\r\n            <p>Your school ID card design has been saved successfully!</p>\r\n          </div>\r\n\r\n          {/* Buttons */}\r\n          <div className=\"flex justify-end gap-4\">\r\n            <button\r\n              onClick={onClose}\r\n              className=\"px-6 py-2 bg-gray-500 text-white rounded hover:bg-gray-600\"\r\n            >\r\n              Close\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                onClose();\r\n                // Navigate to view page or list\r\n                window.location.href = '/manage-school/list-school';\r\n              }}\r\n              className=\"px-6 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\r\n            >\r\n              View Schools\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]}]