// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model School {
  id                   String  @id @default(auto()) @map("_id") @db.ObjectId
  schoolType           String // "single" or "multiBranch"
  schoolName           String
  phoneNo              String?
  altPhoneNo           String?
  address              String?
  city                 String?
  state                String?
  pinCode              String?
  schoolPointOfContact String?
  pointOfContactPhone  String?
  status               String  @default("active") // "active" or "inactive"
  verified             Boolean @default(false)
  logoUrl              String?
  qrCode               String?
  idCardDesignUrl      String?

  // Permissions
  selectLayoutOfIdCard String? // "vertical_id" or "horizontal_id"
  sessionDisplayOnCard Boolean @default(true)
  pdfDownloadAccess    Boolean @default(true) // "Enable" or "Disable"
  idCardsNoType        String  @default("Roll No") // "Roll No" or "Admission No"
  session              String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation fields (opposite side)
  students Student[] @relation("SchoolStudents")
  batches  Batch[]   @relation("SchoolBatches")

  @@map("schools")
}

model Student {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  studentName String
  rollNo      String?
  admissionNo String?
  class       String?
  section     String?
  dateOfBirth DateTime?
  fatherName  String?
  motherName  String?
  address     String?
  phoneNo     String?
  email       String?
  photoUrl    String?
  bloodGroup  String?

  // Relation to School
  schoolId String @db.ObjectId
  school   School @relation("SchoolStudents", fields: [schoolId], references: [id], onDelete: Cascade)

  // Relation to Batch
  batchId String? @db.ObjectId
  batch   Batch?  @relation(fields: [batchId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

model Batch {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  batchName    String
  class        String
  section      String?
  academicYear String
  startDate    DateTime?
  endDate      DateTime?

  // Relation to School
  schoolId String @db.ObjectId
  school   School @relation("SchoolBatches", fields: [schoolId], references: [id], onDelete: Cascade)

  // Relation to Students
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("batches")
}
