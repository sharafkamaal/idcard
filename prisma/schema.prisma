// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  name          String
  password      String
  avatar        String?
  phone         String?
  role          String    @default("ADMIN")
  theme         String    @default("light")
  notifications Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

model School {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  schoolType              String
  schoolName              String
  phoneNo                 String?
  altPhoneNo              String?
  address                 String?
  city                    String?
  state                   String?
  pinCode                 String?
  schoolPointOfContact    String?
  pointOfContactPhone     String?
  status                  String    @default("active")
  verified                Boolean   @default(false)
  logoUrl                 String?
  qrCode                  String?
  idCardDesignUrl         String?
  selectLayoutOfIdCard    String    @default("vertical_id")
  sessionDisplayOnCard    Boolean   @default(true)
  pdfDownloadAccess       Boolean   @default(true)
  idCardsNoType           String    @default("Roll No")
  session                 String?
  email                   String?
  website                 String?
  code                    String?
  term                    String?
  students                Student[] // Add this relation
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  @@map("schools")
}

model Student {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String
  lastName          String
  fatherName        String?
  email             String?
  phone             String?
  dob               DateTime?
  gender            Gender
  bloodGroup        String?
  rollNumber        String
  class             String
  section           String?
  parentGuardianName String?
  parentPhone       String?
  photoUrl          String?
  qrCode            String?
  status            Status   @default(ACTIVE)
  verified          Boolean  @default(false)
  schoolId          String   @db.ObjectId
  school            School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([schoolId, rollNumber])
  @@map("students")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Status {
  ACTIVE
  INACTIVE
}

